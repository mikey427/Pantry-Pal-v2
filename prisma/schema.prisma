generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  image        String?
  role         Role          @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  householdId  Int?
  household    Household?    @relation(fields: [householdId], references: [id])
  profile      Profile?
  ShoppingList ShoppingList?
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model Household {
  id             Int           @id @default(autoincrement())
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  members        User[]
  savedMealId    Int?          @unique
  ingredients    Ingredient[]
  categories     Category[]
  plannedMealId  Int?          @unique
  shoppingListId Int?          @unique
  savedMeals     SavedMeal?    @relation(fields: [savedMealId], references: [id])
  plannedMeals   PlannedMeal?  @relation(fields: [plannedMealId], references: [id])
  shoppingList   ShoppingList? @relation(fields: [shoppingListId], references: [id])
}

model SavedMeal {
  id          Int        @id @default(autoincrement())
  name        String
  ingredients String[]
  householdId Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  household   Household?
}

model Ingredient {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  categoryId  Int?
  householdId Int?
  quantity    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  household   Household? @relation(fields: [householdId], references: [id])
  Category    Category?  @relation(fields: [categoryId], references: [id])
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String
  householdId Int?
  ingredients Ingredient[]
  household   Household?   @relation(fields: [householdId], references: [id])
  createdAt   DateTime     @default(now())
}

model PlannedMeal {
  id          Int        @id @default(autoincrement())
  householdId Int
  month       String
  createdAt   DateTime   @default(now())
  year        Int
  data        Json
  Household   Household?
}

model ShoppingList {
  id          Int        @id @default(autoincrement())
  data        Json
  userId      Int?       @unique
  householdId Int?       @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  household   Household?
  user        User?      @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
